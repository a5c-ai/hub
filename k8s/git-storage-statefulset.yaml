apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hub-git-storage
  namespace: hub
  labels:
    app: hub-git-storage
    app.kubernetes.io/name: hub
    app.kubernetes.io/component: git-storage
    app.kubernetes.io/part-of: hub-git-hosting
spec:
  serviceName: hub-git-storage-headless
  replicas: 3
  selector:
    matchLabels:
      app: hub-git-storage
  template:
    metadata:
      labels:
        app: hub-git-storage
        app.kubernetes.io/name: hub
        app.kubernetes.io/component: git-storage
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      initContainers:
      - name: storage-init
        image: hub/backend:latest
        command: ["/bin/sh"]
        args:
          - -c
          - |
            # Generate node ID based on pod name and namespace
            NODE_ID="${POD_NAME}.${POD_NAMESPACE}"
            echo "Initializing git storage node: $NODE_ID"
            
            # Create directory structure
            mkdir -p /git-data/repositories
            mkdir -p /git-data/objects
            mkdir -p /git-data/refs
            
            # Set proper permissions
            chown -R 1001:1001 /git-data
            chmod -R 755 /git-data
            
            echo "$NODE_ID" > /git-data/node-id
            echo "Git storage node initialized successfully"
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: git-data
          mountPath: /git-data
        securityContext:
          runAsUser: 0  # Need root for initialization
          allowPrivilegeEscalation: true
      containers:
      - name: git-storage
        image: hub/backend:latest
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: grpc
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: DISTRIBUTED_STORAGE_ENABLED
          value: "true"
        - name: DISTRIBUTED_STORAGE_NODE_ID
          value: "$(POD_NAME).$(POD_NAMESPACE)"
        - name: DISTRIBUTED_STORAGE_REPLICATION_COUNT
          value: "3"
        - name: DISTRIBUTED_STORAGE_CONSISTENT_HASHING
          value: "true"
        - name: DISTRIBUTED_STORAGE_HEALTH_CHECK_INTERVAL
          value: "30s"
        - name: REPOSITORY_PATH
          value: "/git-data/repositories"
        - name: PORT
          value: "8080"
        - name: GIN_MODE
          value: "release"
        - name: LOG_LEVEL
          value: "4"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: hub-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: hub-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: hub-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
            storage: "100Gi"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: git-data
          mountPath: /git-data
        - name: git-temp
          mountPath: /tmp/git
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: git-temp
        emptyDir: {}
      terminationGracePeriodSeconds: 60
  volumeClaimTemplates:
  - metadata:
      name: git-data
      labels:
        app: hub-git-storage
    spec:
      accessModes:
        - ReadWriteOnce
      storageClassName: managed-premium
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: Service
metadata:
  name: hub-git-storage-headless
  namespace: hub
  labels:
    app: hub-git-storage
    app.kubernetes.io/name: hub
    app.kubernetes.io/component: git-storage
spec:
  clusterIP: None
  selector:
    app: hub-git-storage
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: grpc
    port: 9090
    targetPort: 9090
    protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: hub-git-storage
  namespace: hub
  labels:
    app: hub-git-storage
    app.kubernetes.io/name: hub
    app.kubernetes.io/component: git-storage
spec:
  selector:
    app: hub-git-storage
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: grpc
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hub-git-storage-config
  namespace: hub
  labels:
    app: hub-git-storage
    app.kubernetes.io/name: hub
    app.kubernetes.io/component: git-storage
data:
  discovery-script.sh: |
    #!/bin/bash
    # Script to discover other git storage nodes
    
    NAMESPACE=${POD_NAMESPACE:-hub}
    SERVICE_NAME="hub-git-storage-headless"
    
    # Get all pod IPs for the service
    NODE_LIST=""
    for i in $(seq 0 $((REPLICAS-1))); do
      POD_NAME="hub-git-storage-$i"
      POD_FQDN="$POD_NAME.$SERVICE_NAME.$NAMESPACE.svc.cluster.local"
      
      if [ "$i" -gt 0 ]; then
        NODE_LIST="$NODE_LIST,"
      fi
      
      NODE_LIST="$NODE_LIST{\"id\":\"$POD_NAME.$NAMESPACE\",\"address\":\"http://$POD_FQDN:8080\",\"weight\":1}"
    done
    
    echo "[$NODE_LIST]"
  
  replication-config.yaml: |
    storage:
      distributed:
        enabled: true
        replication_count: 3
        consistent_hashing: true
        health_check_interval: "30s"
        storage_nodes: []  # Populated at runtime via discovery